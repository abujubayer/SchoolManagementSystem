package jpa.service;


import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityNotFoundException;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

import jpa.dao.StudentDAO;
import jpa.entitymodels.Course;
import jpa.entitymodels.Student;


public class StudentService implements StudentDAO {

	//This method reads the student table in your database and returns 
	//the data as a List<Student>
	
	@Override
	public List<Student> getAllStudents() {
		//this does not appear to be used.
		EntityManagerFactory entitymanagerfactory = Persistence.createEntityManagerFactory("SMS");
		EntityManager entitymanager = entitymanagerfactory.createEntityManager();
		TypedQuery<Student> query = entitymanager.createNamedQuery("Student.all", Student.class);
		List <Student> results = query.getResultList();
		
		// close the entity manager
		entitymanager.close();
		entitymanagerfactory.close();
		
		return results;
	}
	
//This is what is needed to print all students This should be in main or adapted into the method.
//	StudentService stu = new StudentService();
//	List<Student> studentList = new ArrayList<Student>();
//	studentList = stu.getAllStudents();
//	System.out.println(studentList);

	//This method takes a Student’s email as a String and parses the student list
	//for a Student with that email and returns a Student Object.
	

	public Student getStudentByEmail(String sEmail) {
		EntityManagerFactory entitymanagerfactory = Persistence.createEntityManagerFactory("SMS");
		EntityManager entitymanager = entitymanagerfactory.createEntityManager();
		Student foundStudent = entitymanager.find(Student.class, sEmail);
		if (foundStudent == null) {
			throw new EntityNotFoundException("Can't find Student Registration for :" + sEmail);
		}
		// close the entity manager
		entitymanager.close();
		entitymanagerfactory.close();
		return foundStudent;
	}

	//This method takes two parameters: the first one is the user email and the second one is the password from the user input. 
	//Return whether or not student was found.
	@Override
	public boolean validateStudent(String sEmail, String sPassword) {
		
		EntityManagerFactory entitymanagerfactory = Persistence.createEntityManagerFactory("SMS");
		EntityManager entitymanager = entitymanagerfactory.createEntityManager();
		Student foundStudent = entitymanager.find(Student.class, sEmail);
			if (foundStudent == null) {
			//	throw new EntityNotFoundException("Can't find Student Registration for :" + sEmail);
				System.out.println("Cannot find Student Registration for : " + sEmail);
				// close the entity manager
				entitymanager.close();
				entitymanagerfactory.close();
				return false;

			}
			else if (!foundStudent.getPassword().equals(sPassword)) {
					System.out.println("Incorrect Password.");
					// close the entity manager
					entitymanager.close();
					entitymanagerfactory.close();
					return false;
			}else {
				// close the entity manager
				entitymanager.close();
				entitymanagerfactory.close();
				return true;
			}
		
	}
	//After a successful student validation, this method takes a Student’s email 
	//and a Course ID. It checks in the join table (i.e. Student_Course) generated by JPA to find if a Student with that Email is currently attending a Course with that ID.
	//If the Student is not attending that Course, register the student 
	//to that course; otherwise not.
	
	@Override
	public void registerStudentToCourse(String sEmail, int cId) {
		// TODO Auto-generated method stub
		
		try {
			EntityManagerFactory entitymanagerfactory = Persistence.createEntityManagerFactory("SMS");
			EntityManager entitymanager = entitymanagerfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			Course cou = new Course();
			cou =entitymanager.find(Course.class, cId);
			
			Student student= new Student();
			StudentService stu = new StudentService();
			student =stu.getStudentByEmail(sEmail);
			System.out.println();
			System.out.println("Course="+cou.getcName());
			System.out.println("Student="+student.getsName());
			System.out.println("Checking Current CourseList");
			List<Course> courseList=getStudentCourses(sEmail);
		
			courseList.add(cou);
			Student addedStudent = new Student(student.getsEmail(),student.getsName(),student.getPassword(),courseList);
			entitymanager.merge(addedStudent);
			entitymanager.getTransaction().commit();
			System.out.println();
			System.out.println("Printing Updated Course List");
			courseList = getStudentCourses(sEmail);
			
			entitymanager.close();
			entitymanagerfactory.close();
			} catch(Exception e) {
				System.out.println("Error registering student to Course.........."
						+ "Already Registered.");
			}
		}
		
	
	//This method takes a Student’s Email as a parameter and would find all 
	//the courses a student is registered.
	
	@Override
	public List<Course> getStudentCourses(String sEmail) {
		// TODO Auto-generated method stub
		
        EntityManagerFactory entitymanagerfactory = Persistence.createEntityManagerFactory("SMS");
		EntityManager entitymanager = entitymanagerfactory.createEntityManager();
        
		Student foundStudent = entitymanager.find(Student.class, sEmail);
		List<Course> myCourses = foundStudent.getsCourses();
		System.out.println();
		System.out.println("My Classes: ");
        System.out.printf("%-5s|%-25s|%-25s\n", "#", "COURSE NAME", "INSTRUCTOR NAME");
        System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        
        for(Course course : myCourses){
            System.out.printf("%-5s|%-25s|%-25s \n", course.getcId(), course.getcName(), course.getcInstructorName());
        }
	
        entitymanager.close();
		entitymanagerfactory.close();
		return myCourses;
	}
}
	

	
	


